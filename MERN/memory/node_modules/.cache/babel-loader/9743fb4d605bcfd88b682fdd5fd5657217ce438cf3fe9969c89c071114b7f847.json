{"ast":null,"code":"var _jsxFileName = \"/Users/austinsenft/Desktop/Coding_Dojo/MERN/memory/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/Ludwig.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ClericBeast.png\",\n  matched: false\n}, {\n  \"src\": \"/img/rom-the-vacuous-spider.png\",\n  matched: false\n}, {\n  \"src\": \"/img/OrphanofKos.png\",\n  matched: false\n}, {\n  \"src\": \"/img/Vicar_Amelia.png\",\n  matched: false\n}, {\n  \"src\": \"/img/BloodStarvedBeast.png\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  //shuffle cards \n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(0);\n  };\n\n  // handle a choice\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  // compare two selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        //Allow time for users to see mismatched cards before flipping back over\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // console.log(cards)\n\n  // reset choices & increase turn \n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //start game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    s: true,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bloodborne Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turns:  \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SingleCard","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","setTimeout","prevTurns"],"sources":["/Users/austinsenft/Desktop/Coding_Dojo/MERN/memory/src/App.js"],"sourcesContent":["import './App.css'\nimport { useEffect, useState } from 'react'\nimport SingleCard from './components/SingleCard'\n\n\n\nconst cardImages = [\n  { \"src\": \"/img/Ludwig.png\", matched: false },\n  { \"src\": \"/img/ClericBeast.png\", matched: false },\n  { \"src\": \"/img/rom-the-vacuous-spider.png\", matched: false },\n  { \"src\": \"/img/OrphanofKos.png\", matched: false },\n  { \"src\": \"/img/Vicar_Amelia.png\", matched: false },\n  { \"src\": \"/img/BloodStarvedBeast.png\", matched: false }\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  //shuffle cards \n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n    setCards(shuffledCards)\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(0)\n  }\n\n  // handle a choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // compare two selected cards\n  useEffect(() => {\n    \n    if (choiceOne && choiceTwo) {\n      setDisabled(true)\n      if (choiceOne.src === choiceTwo.src) {\n        \n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true }\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n\n        //Allow time for users to see mismatched cards before flipping back over\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n\n  // console.log(cards)\n\n  // reset choices & increase turn \n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n\n  //start game automatically\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  return (\n    \n    <div className=\"App\" s>\n      <h1>Bloodborne Memory</h1>\n\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns:  {turns}</p>\n    </div>\n  );\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}