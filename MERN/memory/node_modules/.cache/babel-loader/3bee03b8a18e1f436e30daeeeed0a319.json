{"ast":null,"code":"var _jsxFileName = \"/Users/austinsenft/Desktop/Coding_Dojo/MERN/magic-memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/Ludwig.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ClericBeast.png\",\n  matched: false\n}, {\n  \"src\": \"/img/EbrietasCosmos.png\",\n  matched: false\n}, {\n  \"src\": \"/img/OrphanofKos.png\",\n  matched: false\n}, {\n  \"src\": \"/img/Gerhman.png\",\n  matched: false\n}, {\n  \"src\": \"/img/BloodStarvedBeast.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); //shuffle cards \n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a choice\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; // compare two selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        //Allow time for users to see mismatched cards before flipping back over\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards); // reset choices & increase turn \n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bloodborne Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WWe0fUXumRKyACXDD8rBflBzdbo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/austinsenft/Desktop/Coding_Dojo/MERN/magic-memory/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","setTimeout","console","log","prevTurns"],"mappings":"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","sourcesContent":["import './App.css'\nimport { useEffect, useState } from 'react'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n  { \"src\": \"/img/Ludwig.png\", matched: false },\n  { \"src\": \"/img/ClericBeast.png\", matched: false },\n  { \"src\": \"/img/EbrietasCosmos.png\", matched: false },\n  { \"src\": \"/img/OrphanofKos.png\", matched: false },\n  { \"src\": \"/img/Gerhman.png\", matched: false },\n  { \"src\": \"/img/BloodStarvedBeast.png\", matched: false }\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  //shuffle cards \n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n    setCards(shuffledCards)\n    setTurns(0)\n  }\n\n  // handle a choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // compare two selected cards\n  useEffect(() => {\n    \n    if (choiceOne && choiceTwo) {\n      \n      if (choiceOne.src === choiceTwo.src) {\n        \n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true }\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n\n        //Allow time for users to see mismatched cards before flipping back over\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n\n  console.log(cards)\n\n  // reset choices & increase turn \n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Bloodborne Memory</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}