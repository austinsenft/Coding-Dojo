{"ast":null,"code":"var _jsxFileName = \"/Users/austinsenft/Desktop/Coding_Dojo/MERN/magic-memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/Ludwig.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ClericBeast.png\",\n  matched: false\n}, {\n  \"src\": \"/img/EbrietasCosmos.png\",\n  matched: false\n}, {\n  \"src\": \"/img/OrphanofKos.png\",\n  matched: false\n}, {\n  \"src\": \"/img/Gerhman.png\",\n  matched: false\n}, {\n  \"src\": \"/img/BloodStarvedBeast.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //shuffle cards \n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a choice\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; // compare two selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log('those cards match');\n        resetTurn();\n      } else {\n        console.log('those cards do not match');\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]); // reset choices & increase turn \n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bloodborne Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/austinsenft/Desktop/Coding_Dojo/MERN/magic-memory/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","console","log","resetTurn","prevTurns"],"mappings":"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","sourcesContent":["import './App.css'\nimport {useEffect, useState} from 'react'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n  {\"src\": \"/img/Ludwig.png\", matched: false },\n  {\"src\": \"/img/ClericBeast.png\", matched: false },\n  {\"src\": \"/img/EbrietasCosmos.png\", matched: false },\n  {\"src\": \"/img/OrphanofKos.png\", matched: false },\n  {\"src\": \"/img/Gerhman.png\", matched: false },\n  {\"src\": \"/img/BloodStarvedBeast.png\", matched: false} \n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n  //shuffle cards \n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({...card, id: Math.random() }))\n\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  // handle a choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // compare two selected cards\n  useEffect( () => {\n    if (choiceOne && choiceTwo) {\n\n      if (choiceOne.src === choiceTwo.src) {\n        console.log('those cards match')\n        resetTurn()\n      } else {\n        console.log('those cards do not match')\n        resetTurn() \n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n  // reset choices & increase turn \n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns +1)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Bloodborne Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n          key={card.id} \n          card={card}\n          handleChoice={handleChoice}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}